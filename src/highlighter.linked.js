Object.entries({"cpp/constants.js":"var constants=[\n    // Numerics library - Floating-Point Environment\n    'FE_ALL_EXCEPT','FE_DIVBYZERO','FE_INEXACT','FE_INVALID','FE_OVERFLOW','FE_UNDERFLOW','FE_DOWNWARD','FE_TONEAREST','FE_TOWARDZERO','FE_UPWARD','FE_DFL_ENV',\n    //\n    'EOF','EXIT_FAILURE','EXIT_SUCCESS','INFINITY','INT_MAX','INT_MIN','LONG_MAX','LONG_MIN','NULL',\n]\nconsole.log(JSON.stringify(constants))\n","cpp/constants.json":"[\"FE_ALL_EXCEPT\",\"FE_DIVBYZERO\",\"FE_INEXACT\",\"FE_INVALID\",\"FE_OVERFLOW\",\"FE_UNDERFLOW\",\"FE_DOWNWARD\",\"FE_TONEAREST\",\"FE_TOWARDZERO\",\"FE_UPWARD\",\"FE_DFL_ENV\",\"EOF\",\"EXIT_FAILURE\",\"EXIT_SUCCESS\",\"INFINITY\",\"INT_MAX\",\"INT_MIN\",\"LONG_MAX\",\"LONG_MIN\",\"NULL\"]\n","cpp/keywords.js":"/*\n    `keywords` contains `Keywords` and `Alternative representations`.\n    Standard: N3242 2.13.\n    Compelete.\n*/\nvar keywords=[\n    // Keywords\n    'alignas','alignof','asm','auto','bool','break','case','catch','char','char16_t','char32_t','class','const','constexpr','const_cast','continue','default','delete','double','do','dynamic_cast','else','enum','explicit','export','extern','false','float','for','friend','goto','if','inline','int','long','mutable','namespace','new','noexcept','nullptr','operator','private','protected','public','register','reinterpret_cast','return','short','signed','sizeof','static','static_assert','static_cast','struct','switch','template','this','thread_local','throw','true','try','typedef','typeid','typename','union','unsigned','using','virtual','void','volatile','wchar_t','while',\n    // Alternative representations\n    'and','and_eq','bitand','bitor','compl','not','not_eq','or','or_eq','xor','xor_eq',\n]\n","cpp/keywords.json":"[\"alignas\",\"alignof\",\"asm\",\"auto\",\"bool\",\"break\",\"case\",\"catch\",\"char\",\"char16_t\",\"char32_t\",\"class\",\"const\",\"constexpr\",\"const_cast\",\"continue\",\"default\",\"delete\",\"double\",\"do\",\"dynamic_cast\",\"else\",\"enum\",\"explicit\",\"export\",\"extern\",\"false\",\"float\",\"for\",\"friend\",\"goto\",\"if\",\"inline\",\"int\",\"long\",\"mutable\",\"namespace\",\"new\",\"noexcept\",\"nullptr\",\"operator\",\"private\",\"protected\",\"public\",\"register\",\"reinterpret_cast\",\"return\",\"short\",\"signed\",\"sizeof\",\"static\",\"static_assert\",\"static_cast\",\"struct\",\"switch\",\"template\",\"this\",\"thread_local\",\"throw\",\"true\",\"try\",\"typedef\",\"typeid\",\"typename\",\"union\",\"unsigned\",\"using\",\"virtual\",\"void\",\"volatile\",\"wchar_t\",\"while\",\"and\",\"and_eq\",\"bitand\",\"bitor\",\"compl\",\"not\",\"not_eq\",\"or\",\"or_eq\",\"xor\",\"xor_eq\"]\n","cpp/library.js":"/*\n    `stringset_library` contains the following:\n    Algorithms library - Non-modifying sequence operations\n    Algorithms library - Modifying sequence operations\n    Algorithms library - Sorting and related operations\n    Algorithms library - C library algorithms\n    Numerics library - Floating-Point Environment\n    Numerics library - Complex numbers\n    Numerics library - Random number generation\n    Standard: N3242 25, 26.\n    Algorithm Compelete.\n*/\nvar library=[\n    // Algorithms library - Non-modifying sequence operations\n    'all_of','any_of','none_of','for_each','find','find_if','find_if_not','find_end','find_first_of','adjacent_find','count','count_if','mismatch','equal','is_permutation','search','search_n',\n    // Algorithms library - Modifying sequence operations\n    'copy','copy_n','copy_if','copy_backward','move','move_backward','swap_ranges','iter_swap','transform','replace','replace_if','replace_copy','replace_copy_if','fill','fill_n','generate','generate_n','remove','remove_if','remove_copy','remove_copy_if','unique','unique_copy','reverse','reverse_copy','rotate','rotate_copy','random_shuffle','is_partitioned','partition','stable_partition','partition_copy','partition_point',\n    // Algorithms library - Sorting and related operations\n    'sort','stable_sort','partial_sort','partial_sort_copy','is_sorted','is_sorted_until','nth_element','lower_bound','upper_bound','equal_range','binary_search','merge','inplace_merge','includes','set_union','set_intersection','set_difference','set_symmetric_difference','push_heap','pop_heap','make_heap','sort_heap','is_heap','is_heap_until','min','max','minmax','min_element','max_element','minmax_element','lexicographical_compare','next_permutation','prev_permutation',// Algorithms library - C library algorithms\n    'bsearch','qsort',\n    // Numerics library - Floating-Point Environment\n    'feclearexcept','fegetexceptflag','feraiseexcept','fesetexceptflag','fetestexcept','fegetround','fesetround','fegetenv','feholdexcept','fesetenv','feupdateenv',\n    // Numerics library - Complex numbers\n    'complex','real','imag','abs','arg','norm','conj','proj','polar','acos','asin','atan','acosh','asinh','atanh','cos','cosh','exp','log','log10','pow','sin','sinh','sqrt','tan','tanh',\n    // Numerics library - Random number generation\n    'linear_congruential_engine','mersenne_twister_engine','subtract_with_carry_engine','discard_block_engine','independent_bits_engine','shuffle_order_engine','minstd_rand0','minstd_rand','mt19937','mt19937_64','ranlux24_base','ranlux48_base','ranlux24','ranlux48','knuth_b','default_random_engine','random_device','seed_seq','RealType generate_canonical(URNG& g)','uniform_int_distribution','uniform_real_distribution','bernoulli_distribution','binomial_distribution','geometric_distribution','negative_binomial_distribution','poisson_distribution','exponential_distribution','gamma_distribution','weibull_distribution','extreme_value_distribution','normal_distribution','lognormal_distribution','chi_squared_distribution','cauchy_distribution','fisher_f_distribution','student_t_distribution','discrete_distribution','piecewise_constant_distribution','piecewise_linear_distribution',\n    //\n    'accumulate','adjacent_difference','advance','back','begin','chdir','chroot','cin','copy','copy','count','count_if','cout','distance','empty','end','endl','equal_range','execl','exit','fclose','fflush','fgets','FILE','fill','first','fopen','for_each','fork','fprintf','fputc','fputs','fputs','freopen','front','fscanf','getchar','getpagesize','gets','inner_product','int16_t','int32_t','int64_t','int8_t','uint16_t','uint32_t','uint64_t','uint8_t','ios_base','islower','isupper','iterator','kill','malloc','max','max_element','memset','min','min_element','nice','partial_sum','pclose','pop','popen','printf','ptrace','push','push_back','puts','random_shuffle','remove','reverse','scanf','second','setvbuf','size','sort','sprintf','sscanf','std','stdin','stdout','strcat','strcmp','strcpy','strlen','strncmp','swap','sync_with_stdio','top','unique','plus','equal','is_permutation','search','search_n','memcpy','log2','log10','log','exp','pow','round','floor','ceil','sqrt','clock','clock_t','erase','insert','plus','minus','multiplies','divides','modulus','negate','less','greater',\n]\nconsole.log(JSON.stringify(library))\n","cpp/library.json":"[\"all_of\",\"any_of\",\"none_of\",\"for_each\",\"find\",\"find_if\",\"find_if_not\",\"find_end\",\"find_first_of\",\"adjacent_find\",\"count\",\"count_if\",\"mismatch\",\"equal\",\"is_permutation\",\"search\",\"search_n\",\"copy\",\"copy_n\",\"copy_if\",\"copy_backward\",\"move\",\"move_backward\",\"swap_ranges\",\"iter_swap\",\"transform\",\"replace\",\"replace_if\",\"replace_copy\",\"replace_copy_if\",\"fill\",\"fill_n\",\"generate\",\"generate_n\",\"remove\",\"remove_if\",\"remove_copy\",\"remove_copy_if\",\"unique\",\"unique_copy\",\"reverse\",\"reverse_copy\",\"rotate\",\"rotate_copy\",\"random_shuffle\",\"is_partitioned\",\"partition\",\"stable_partition\",\"partition_copy\",\"partition_point\",\"sort\",\"stable_sort\",\"partial_sort\",\"partial_sort_copy\",\"is_sorted\",\"is_sorted_until\",\"nth_element\",\"lower_bound\",\"upper_bound\",\"equal_range\",\"binary_search\",\"merge\",\"inplace_merge\",\"includes\",\"set_union\",\"set_intersection\",\"set_difference\",\"set_symmetric_difference\",\"push_heap\",\"pop_heap\",\"make_heap\",\"sort_heap\",\"is_heap\",\"is_heap_until\",\"min\",\"max\",\"minmax\",\"min_element\",\"max_element\",\"minmax_element\",\"lexicographical_compare\",\"next_permutation\",\"prev_permutation\",\"bsearch\",\"qsort\",\"feclearexcept\",\"fegetexceptflag\",\"feraiseexcept\",\"fesetexceptflag\",\"fetestexcept\",\"fegetround\",\"fesetround\",\"fegetenv\",\"feholdexcept\",\"fesetenv\",\"feupdateenv\",\"complex\",\"real\",\"imag\",\"abs\",\"arg\",\"norm\",\"conj\",\"proj\",\"polar\",\"acos\",\"asin\",\"atan\",\"acosh\",\"asinh\",\"atanh\",\"cos\",\"cosh\",\"exp\",\"log\",\"log10\",\"pow\",\"sin\",\"sinh\",\"sqrt\",\"tan\",\"tanh\",\"linear_congruential_engine\",\"mersenne_twister_engine\",\"subtract_with_carry_engine\",\"discard_block_engine\",\"independent_bits_engine\",\"shuffle_order_engine\",\"minstd_rand0\",\"minstd_rand\",\"mt19937\",\"mt19937_64\",\"ranlux24_base\",\"ranlux48_base\",\"ranlux24\",\"ranlux48\",\"knuth_b\",\"default_random_engine\",\"random_device\",\"seed_seq\",\"RealType generate_canonical(URNG& g)\",\"uniform_int_distribution\",\"uniform_real_distribution\",\"bernoulli_distribution\",\"binomial_distribution\",\"geometric_distribution\",\"negative_binomial_distribution\",\"poisson_distribution\",\"exponential_distribution\",\"gamma_distribution\",\"weibull_distribution\",\"extreme_value_distribution\",\"normal_distribution\",\"lognormal_distribution\",\"chi_squared_distribution\",\"cauchy_distribution\",\"fisher_f_distribution\",\"student_t_distribution\",\"discrete_distribution\",\"piecewise_constant_distribution\",\"piecewise_linear_distribution\",\"accumulate\",\"adjacent_difference\",\"advance\",\"back\",\"begin\",\"chdir\",\"chroot\",\"cin\",\"copy\",\"copy\",\"count\",\"count_if\",\"cout\",\"distance\",\"empty\",\"end\",\"endl\",\"equal_range\",\"execl\",\"exit\",\"fclose\",\"fflush\",\"fgets\",\"FILE\",\"fill\",\"first\",\"fopen\",\"for_each\",\"fork\",\"fprintf\",\"fputc\",\"fputs\",\"fputs\",\"freopen\",\"front\",\"fscanf\",\"getchar\",\"getpagesize\",\"gets\",\"inner_product\",\"int16_t\",\"int32_t\",\"int64_t\",\"int8_t\",\"uint16_t\",\"uint32_t\",\"uint64_t\",\"uint8_t\",\"ios_base\",\"islower\",\"isupper\",\"iterator\",\"kill\",\"malloc\",\"max\",\"max_element\",\"memset\",\"min\",\"min_element\",\"nice\",\"partial_sum\",\"pclose\",\"pop\",\"popen\",\"printf\",\"ptrace\",\"push\",\"push_back\",\"puts\",\"random_shuffle\",\"remove\",\"reverse\",\"scanf\",\"second\",\"setvbuf\",\"size\",\"sort\",\"sprintf\",\"sscanf\",\"std\",\"stdin\",\"stdout\",\"strcat\",\"strcmp\",\"strcpy\",\"strlen\",\"strncmp\",\"swap\",\"sync_with_stdio\",\"top\",\"unique\",\"plus\",\"equal\",\"is_permutation\",\"search\",\"search_n\",\"memcpy\",\"log2\",\"log10\",\"log\",\"exp\",\"pow\",\"round\",\"floor\",\"ceil\",\"sqrt\",\"clock\",\"clock_t\",\"erase\",\"insert\",\"plus\",\"minus\",\"multiplies\",\"divides\",\"modulus\",\"negate\",\"less\",\"greater\"]\n","cpp/stlcontainers.js":"var stlcontainers=[\n    'array','bitset','deque','forward_list','list','map','multimap','multiset','pair','priority_queue','queue','set','stack','string','unordered_map','unordered_set','valarray','vector',\n]\nconsole.log(JSON.stringify(stlcontainers))\n","cpp/stlcontainers.json":"[\"array\",\"bitset\",\"deque\",\"forward_list\",\"list\",\"map\",\"multimap\",\"multiset\",\"pair\",\"priority_queue\",\"queue\",\"set\",\"stack\",\"string\",\"unordered_map\",\"unordered_set\",\"valarray\",\"vector\"]\n","demo.html":"<!doctype html>\n<meta charset=utf-8>\n<title>Example</title>\n<div style=display:table;table-layout:fixed;width:100%;>\n    <div style=display:table-row>\n        <div style=display:table-cell;width:50%;padding:16px;>\n            <textarea id=textarea style=width:100% rows=16></textarea>\n        </div>\n        <div style=display:table-cell;width:50%;padding:16px;vertical-align:top;>\n            <div id=div>\n                <div id=divCode class='bordered highlighted_cpp'></div>\n            </div>\n        </div>\n    </div>\n</div>\n<script src=https://cdn.rawgit.com/anliting/module/ff785a82a81a00a811403aa078abf09d8b4215e0/src/module.js async data-main=demo.js></script>\n","demo.js":"(async()=>{\n    let syntaxHighlighter=await module.shareImport('highlighter.js')\n    let\n        textarea=   document.getElementById('textarea'),\n        div=        document.getElementById('div'),\n        divCode=    document.getElementById('divCode')\n    textarea.value=`#include<stdio.h>\nint main(){\n    return 0;\n}\n`\n    update()\n    textarea.oninput=update\n    async function update(){\n        divCode.textContent=\n            textarea.value+(/\\n$/.test(textarea.value)?'':'\\n')\n        await syntaxHighlighter.highlight_all(div)\n        await syntaxHighlighter.border_all(div)\n    }\n})()\n","highlightCpp.js":"(()=>{\nvar\n    db=new syntaxHighlighter.Database('cpp'),\n    matchingRules={\n        characterLiteral:{\n            regex:/^('(?:[^'\\\\]|\\\\.)')/,\n        },\n        comment:[\n            {\n                regex:/^(\\/\\/.*)\\n/,\n            },{\n                regex:/^(\\/\\*(?:(?!\\*\\/)(?:.|\\n))*\\*\\/)/,\n            }\n        ],\n        rawStringLiteral:{\n            regex:/^(R\"([^\\ \\(\\)\\\\]{0,16})\\((?:(?!\\)\\2\")(?:.|\\n))*\\)\\2\")/,\n        },\n        cStringLiteral:{\n            regex:/^(\"(?:[^\"\\\\]|\\\\.)*\")/,\n        },\n        identifier:{\n            regex:/^([A-Z_a-z][0-9A-Z_a-z]*)/,\n            containKeywords:[\n                'keywords',\n                'library',\n                'stlcontainers',\n                'constants',\n            ]\n        },\n        numberLiteral:{\n            regex:/^([0-9][0-9ELXelx.]*)/,\n        },\n        operator:{\n            regex:/^([()\\[\\]{}<>+\\-*\\/%,:;?&^=!~.|])/,\n        },\n        preprocessingDirective:{\n            headRegex:/^(#)/,\n            tailRegex:/^()\\n/,\n            contain:['comment','includePD','definePD'],\n        },\n        includePD:{\n            active:false,\n            headRegex:/^(include)/,\n            tailRegex:/^()\\n/,\n            contain:['comment','headerName'],\n        },\n        headerName:[\n            {\n                active:false,\n                headRegex:/^(<)/,\n                tailRegex:/^(>)/,\n                contain:['headerNameSlash'],\n            },{\n                active:false,\n                headRegex:/^(\")/,\n                tailRegex:/^(\")/,\n                contain:['headerNameSlash'],\n            },\n        ],\n        headerNameSlash:{\n            active:false,\n            regex:/^(\\/)/\n        },\n        definePD:{\n            active:false,\n            headRegex:/^(define)/,\n            tailRegex:/^()\\n/,\n            contain:['comment','operator','definePDKeyValue'],\n        },\n        definePDKeyValue:{\n            active:false,\n            headRegex:/^([A-Z_a-z]+(?:\\([^\\)]*\\))?)/,\n            tailRegex:/^()\\n/,\n            contain:['comment','operator','definePDValue'],\n        },\n        definePDValue:{\n            active:false,\n            headRegex:/^(.)/,\n            tailRegex:/^()\\n/,\n            contain:['comment','operator'],\n        },\n        keywords:{\n            active:false,\n        },\n        library:{\n            active:false,\n        },\n        stlcontainers:{\n            active:false,\n        },\n        constants:{\n            active:false,\n        },\n    }\nsyntaxHighlighter.highlightCpp=highlightCpp\nasync function highlightCpp(source){\n    await db.require([\n        'keywords',\n        'library',\n        'stlcontainers',\n        'constants',\n    ])\n    matchingRules.keywords.keywords=db.data.keywords\n    matchingRules.library.keywords=db.data.library\n    matchingRules.stlcontainers.keywords=db.data.stlcontainers\n    matchingRules.constants.keywords=db.data.constants\n    return syntaxHighlighter.highlight(\n        syntaxHighlighter.newlineDeletedAnalyze(matchingRules,source)\n    )\n}\n})()\n","highlightHtml.js":"(()=>{\nvar\n    db=new syntaxHighlighter.Database('html'),\n    matchingRules={\n        startTag:{\n            headRegex:/^()<[a-z]/,\n            tailRegex:/^(\\>)/,\n            contain:['headOfStartTag','attribute']\n        },\n        headOfStartTag:{\n            active:false,\n            headRegex:/^()<[a-z]/,\n            tailRegex:/^()[\\ \\>\\n]/,\n            contain:['tagname']\n        },\n        tagname:{\n            active:false,\n            regex:/^([-A-Za-z]+)/,\n        },\n        attribute:{\n            active:false,\n            headRegex:/^([-A-Za-z]+)/,\n            tailRegex:/^()[\\ \\>\\n]/,\n            contain:['afterEqualInAttribute']\n        },\n        afterEqualInAttribute:{\n            active:false,\n            headRegex:/^(=)/,\n            tailRegex:/^()[\\ \\>\\n]/,\n            contain:['attributeValue'],\n        },\n        attributeValue:[{\n            active:false,\n            headRegex:/^(')/,\n            tailRegex:/^(')/,\n        },{\n            active:false,\n            headRegex:/^(\")/,\n            tailRegex:/^(\")/,\n        },{\n            active:false,\n            headRegex:/^()/,\n            tailRegex:/^()[\\ \\>\\n]/,\n        }],\n        endTag:{\n            headRegex:/^(<\\/)/,\n            tailRegex:/^(\\>)/,\n            contain:['tagname'],\n        },\n        comment:[\n            {\n                regex:/^(\\<!--(?:(?!--\\>)(?:.|\\n))*--\\>)/,\n            },{\n                regex:/^(\\<![^\\>]*\\>)/,\n            }\n        ],\n    }\nsyntaxHighlighter.highlightHtml=highlightHtml\nasync function highlightHtml(source){\n    await db.require([\n    ])\n    return syntaxHighlighter.highlight(\n        syntaxHighlighter.analyze(matchingRules,source)\n    )\n}\n})()\n","highlightJs.js":"(()=>{\nvar\n    db=new syntaxHighlighter.Database('js'),\n    matchingRules={\n        comment:[\n            {\n                regex:/^(\\/\\/.*\\n)/,\n            },{\n                regex:/^(\\/\\*(?:.|\\n)*\\*\\/)/,\n            }\n        ],\n        string:[\n            {\n                regex:/^('(?:[^'\\\\]|\\\\.)*')/,\n            },{\n                regex:/^(\"(?:[^\"\\\\]|\\\\.)*\")/,\n            },{\n                regex:/^(`(?:[^`\\\\]|\\\\.)*`)/,\n            }\n        ],\n        operator:{\n            regex:/^([!%&\\(\\)\\*\\+\\,\\-\\.\\/\\:;\\<=\\>\\?\\[\\]\\^\\{\\|\\}\\~])/,\n        },\n        number:{\n            regex:/^([0-9]+(?:\\.[0-9]+)?)/\n        },\n        identifier:{\n            regex:/^([A-Z_a-z]+)/,\n            containKeywords:[\n                'keyword',\n                'library',\n            ]\n        },\n        keyword:{\n            active:false,\n        },\n        library:{\n            active:false,\n        },\n    }\nsyntaxHighlighter.highlightJs=highlightJs\nasync function highlightJs(source){\n    await db.require([\n        'keyword',\n        'library',\n    ])\n    matchingRules.keyword.keywords=db.data.keyword\n    matchingRules.library.keywords=db.data.library\n    return syntaxHighlighter.highlight(\n        syntaxHighlighter.analyze(matchingRules,source)\n    )\n}\n})()\n","highlightLang.js":"/*\nThis is a sample module.\n*/\n(()=>{\nvar\n    db=new syntaxHighlighter.Database('lang'),\n    matchingRules={\n    }\nsyntaxHighlighter.highlightLang=highlightLang\nasync function highlightLang(source){\n    await db.require([\n    ])\n    return syntaxHighlighter.highlight(\n        syntaxHighlighter.analyze(matchingRules,source)\n    )\n}\n})()\n","highlightTex.js":"/*\nThis is a sample module.\n*/\n(()=>{\nvar\n    db=new syntaxHighlighter.Database('tex'),\n    matchingRules={\n        comment:{\n            regex:/^(%.*\\n)/,\n        },\n        command:{\n            headRegex:/^()\\\\/,\n            tailRegex:/^()[^\\\\a-z]/,\n            contain:['operator','commandName'],\n        },\n        operator:{\n            regex:/^([\\\\\\[\\]\\{\\}])/,\n        },\n        identifier:{\n            regex:/^([a-z]+)/,\n            containKeywords:[\n                'documentClasses',\n                'commonArguments',\n                'commonPackages',\n            ],\n        },\n        commandName:{\n            active:false,\n            regex:/^([a-z]+)/,\n            containKeywords:['coreCommands'],\n        },\n        coreCommands:{\n            active:false,\n        },\n        documentClasses:{\n            active:false,\n        },\n        commonArguments:{\n            active:false,\n        },\n        commonPackages:{\n            active:false,\n        },\n    }\nsyntaxHighlighter.highlightTex=highlightTex\nasync function highlightTex(source){\n    await db.require([\n        'coreCommands',\n        'documentClasses',\n        'commonArguments',\n        'commonPackages',\n    ])\n    matchingRules.coreCommands.keywords=db.data.coreCommands\n    matchingRules.documentClasses.keywords=db.data.documentClasses\n    matchingRules.commonArguments.keywords=db.data.commonArguments\n    matchingRules.commonPackages.keywords=db.data.commonPackages\n    return syntaxHighlighter.highlight(\n        syntaxHighlighter.analyze(matchingRules,source)\n    )\n}\n})()\n","highlighter/Syntax.js":"function Syntax(syntaxName,list){\n    this.syntaxName=syntaxName\n    this.list=list||[]\n}\nSyntax\n","highlighter/analyze.js":"(async()=>{\n    let[\n        Syntax,\n    ]=await Promise.all([\n        module.repository.Syntax,\n    ])\n    function analyze(matchingRules,source){\n        let result=[]\n        while(\n            match(result)||\n            matchSingleCharcter(result)\n        );\n        return result\n        function match(result){\n            for(let syntaxName in matchingRules)\n                if(matchBySyntaxName(syntaxName,result))\n                    return true\n        }\n        function matchBySyntaxName(syntaxName,result){\n            if(matchingRules[syntaxName] instanceof Array){\n                for(let i=0;i<matchingRules[syntaxName].length;i++)\n                    if(matchByRule(\n                        syntaxName,\n                        matchingRules[syntaxName][i],\n                        result\n                    ))\n                        return true\n                return\n            }\n            return matchByRule(\n                syntaxName,\n                matchingRules[syntaxName],\n                result\n            )\n        }\n        function matchByRule(syntaxName,rule,result){\n            if(\n                arguments.callee.caller.caller.name=='match'&&\n                rule.active==false\n            )\n                return\n            if(rule.keywords)\n                return matchSyntaxByKeyword(\n                    syntaxName,\n                    rule.keywords,\n                    result\n                )\n            if(rule.regex)\n                return matchSyntaxByRegex(\n                    syntaxName,\n                    rule.regex,\n                    rule.containKeywords,\n                    result\n                )\n            if(rule.headRegex)\n                return rangeSyntaxByRegex(\n                    syntaxName,\n                    rule.headRegex,\n                    rule.tailRegex,\n                    rule.contain,\n                    result\n                )\n        }\n        function matchSyntaxByKeyword(syntaxName,keywords,result){\n            for(let i=0;i<keywords.length;i++)\n                if(source.substring(0,keywords[i].length)==keywords[i]){\n                    result.push(new Syntax(syntaxName,[keywords[i]]))\n                    source=source.substring(keywords[i].length)\n                    return true\n                }\n        }\n        function matchSyntaxByRegex(\n            syntaxName,\n            regex,\n            containKeywords,\n            result\n        ){\n            if(!regex.test(source))\n                return\n            let match=source.match(regex)[1]\n            source=source.substring(match.length)\n            let syntax=new Syntax(syntaxName)\n            containKeywords&&submatch()||\n            syntax.list.push(match)\n            result.push(syntax)\n            return true\n            function submatch(){\n                for(let i=0;i<containKeywords.length;i++){\n                    let keywords=matchingRules[containKeywords[i]].keywords\n                    if(keywords.indexOf(match)!=-1){\n                        syntax.list.push(\n                            new Syntax(containKeywords[i],[match])\n                        )\n                        return true\n                    }\n                }\n            }\n        }\n        function rangeSyntaxByRegex(\n            syntaxName,\n            headRegex,\n            tailRegex,\n            contain,\n            result\n        ){\n            if(!headRegex.test(source))\n                return\n            let syntax=new Syntax(syntaxName)\n            simpleMatch(headRegex,syntax.list)\n            while(!source.match(tailRegex)&&(\n                contain&&submatch()||\n                matchSingleCharcter(syntax.list)\n            ));\n            simpleMatch(tailRegex,syntax.list)\n            result.push(syntax)\n            return true\n            function submatch(){\n                var i\n                for(i=0;i<contain.length;i++)\n                    if(matchBySyntaxName(contain[i],syntax.list))\n                        return true\n            }\n            function simpleMatch(regex,result){\n                var match\n                try{\n                    match=source.match(regex)[1]\n                    syntax.list.push(match)\n                    source=source.substring(match.length)\n                }catch(e){\n                    console.log(source,regex,source.match(regex))\n                    throw''\n                }\n            }\n        }\n        function matchSingleCharcter(result){\n            if(!source.length)\n                return\n            result.push(source[0])\n            source=source.substring(1)\n            return true\n        }\n    }\n    return analyze\n})()\n","highlighter/border_all.js":"(async()=>{\n    let[dom,html]=await Promise.all([\n        module.repository.althea.dom,\n        module.repository.althea.html,\n    ])\n    function text_border(s){\n        let\n            countOfLines,\n            logCountOfLines\n        s=splitSourceByNewlineCharacter(s)\n        countOfLines=s.split('\\n').length-1\n        logCountOfLines=Math.floor(Math.round(\n            Math.log(countOfLines)/Math.log(10)*1e6\n        )/1e6)\n        return table()\n        function splitSourceByNewlineCharacter(source){\n            return splitElementByNewlineCharacter(\n                dom('div',{innerHTML:source})\n                )\n        }\n        function splitElementByNewlineCharacter(e){\n            return[...e.childNodes].map(node=>\n                node.nodeType==Node.TEXT_NODE?\n                    html.encodeText(node.wholeText)\n                :\n                    splitElementByNewlineCharacter(\n                        node\n                    ).split('\\n').map(s=>(\n                        node.innerHTML=s,\n                        node.outerHTML\n                    )).join('\\n')\n            ).join('')\n        }\n        function table(){\n            let lines=s.split('\\n')\n            lines.pop()\n            return dom('table',\n                lines.map(s=>s+'\\n').map((e,i)=>\n                    tr(i,e)\n                )\n            )\n        }\n        function tr(i,s){\n            return dom('tr',\n                tr=>{tr.dataset.lineNumber=i+1},\n                td_lineNumber(i),\n                dom('td',{className:'content',innerHTML:s})\n            )\n        }\n        function td_lineNumber(i){\n            return dom('td',{className:'lineNumber'},td=>{\n                td.dataset.lineNumber=i+1\n                td.style.width=6*(logCountOfLines+1)+'pt'\n            })\n        }\n    }\n    async function border_all(e){\n        e=e||document\n        for(let f of e.querySelectorAll('div.bordered'))\n            dom(f,\n                {innerHTML:''},\n                text_border(f.innerHTML),\n                f=>{f.style.visibility=''}\n            )\n        for(let f of e.querySelectorAll('script.bordered'))\n            replaceByDiv(\n                dom(f,{innerHTML:''},\n                    text_border(f.innerHTML)\n                )\n            )\n    }\n    function replaceByDiv(e){\n        let div=dom('div',e.firstChild)\n        for(let i=0;i<e.classList.length;i++)\n            div.classList.add(e.classList[i])\n        e.parentNode.insertBefore(div,e)\n        e.parentNode.removeChild(e)\n        return div\n    }\n    return border_all\n})()\n","highlighter/highlight_all/f1.js":"async function f1(e,highlighter){\n    let syntaxHighlighter=this\n    await Promise.all([\n        ...e.querySelectorAll('div'+highlighter.selector)\n    ].map(async e=>{\n        /*e.ondblclick=()=>{\n            e.contentEditable=true\n        }*/\n        e.onkeydown=event=>{\n            var cursorPosition\n            event.stopPropagation()\n            console.log(event.keyCode)\n            if(event.keyCode==37){\n                event.preventDefault()\n                cursorPosition=\n                    getCharacterOffsetWithin(document.getSelection().getRangeAt(0),e)\n                goto(e,Math.max(0,cursorPosition-1),0)\n            }\n            if(event.keyCode==38){\n                event.preventDefault()\n            }\n            if(event.keyCode==39){\n                event.preventDefault()\n                cursorPosition=\n                    getCharacterOffsetWithin(document.getSelection().getRangeAt(0),e)\n                goto(e,Math.min(e.textContent.length,cursorPosition+1),0)\n            }\n        }\n        e.oninput=async event=>{\n            var range,cursorPosition\n            range=document.getSelection().getRangeAt(0)\n            if(range.startContainer!=range.endContainer||range.startOffset!=range.endOffset)\n                return\n            cursorPosition=getCharacterOffsetWithin(document.getSelection().getRangeAt(0),e)\n            var a=e.querySelectorAll('.content')\n            for(var j=0;j<a.length;j++)\n                if(!/\\n$/.test(a[j].textContent))\n                    a[j].textContent+='\\n'\n            if(!/\\n$/.test(e.textContent))\n                e.textContent+='\\n'\n            dom(e,{innerHTML:''},text_border(\n                await syntaxHighlighter[\n                    highlighter.functionName\n                ](e.textContent)\n            ))\n            goto(e,cursorPosition,0)\n        }\n        e.innerHTML=await syntaxHighlighter[highlighter.functionName](e.textContent)\n        if(!e.classList.contains('bordered'))\n            e.style.visibility=''\n        function getCharacterOffsetWithin(range,node){\n            var treeWalker=document.createTreeWalker(\n                node,\n                NodeFilter.SHOW_TEXT,\n                node=>{\n                    var nodeRange=document.createRange()\n                    nodeRange.selectNode(node)\n                    return nodeRange.compareBoundaryPoints(Range.END_TO_END,range)<1?\n                        NodeFilter.FILTER_ACCEPT\n                    :\n                        NodeFilter.FILTER_REJECT\n                }\n            )\n            var charCount=0\n            while(treeWalker.nextNode())\n                charCount+=treeWalker.currentNode.length\n            if(range.startContainer.nodeType==3)\n                charCount+=range.startOffset\n            return charCount\n        }\n        function goto(node,position,which){\n            var treeWalker=document.createTreeWalker(\n                node,\n                NodeFilter.SHOW_TEXT\n            )\n            var charCount=0\n            while(treeWalker.nextNode()){\n                if(position<charCount+treeWalker.currentNode.length){\n                    var selection=window.getSelection()\n                    var range=document.createRange()\n                    if(which==0){\n                        range.setStart(treeWalker.currentNode,position-charCount)\n                        range.setEnd(treeWalker.currentNode,position-charCount)\n                    }else if(which==1){\n                        range.setStart(treeWalker.currentNode,position-charCount)\n                    }else if(which==2){\n                        range.setEnd(treeWalker.currentNode,position-charCount)\n                    }\n                    selection.removeAllRanges()\n                    selection.addRange(range)\n                    return\n                }\n                charCount+=treeWalker.currentNode.length\n            }\n        }\n    }))\n}\nf1\n","highlighter/highlight_all.js":"(async()=>{\n    let f1=await module.shareImport('highlight_all/f1.js')\n    let\n        highlighters=[{\n            header:'highlightCpp.js',\n            selector:'.highlighted_cpp',\n            functionName:'highlightCpp',\n        },{\n            header:'highlightHtml.js',\n            selector:'.highlighted_html',\n            functionName:'highlightHtml',\n        },{\n            header:'highlightJs.js',\n            selector:'.highlighted_js',\n            functionName:'highlightJs',\n        },{\n            header:'highlightTex.js',\n            selector:'.highlighted_tex',\n            functionName:'highlightTex',\n        }]\n    async function highlight_all(e){\n        e=e||document\n        await Promise.all(highlighters.map(async highlighter=>{\n            if(e.querySelectorAll(highlighter.selector).length==0)\n                return\n            await this.modules.require(highlighter.header)\n            await Promise.all([\n                f0.call(this,e,highlighter),\n                f1.call(this,e,highlighter),\n                f2.call(this,e,highlighter),\n            ])\n        }))\n    }\n    async function f0(e,highlighter){\n        let syntaxHighlighter=this\n        await Promise.all([\n            ...e.querySelectorAll('span'+highlighter.selector)\n        ].map(async e=>{\n            e.innerHTML=await syntaxHighlighter[highlighter.functionName](e.textContent)\n            e.style.visibility=''\n        }))\n    }\n    async function f2(e,highlighter){\n        let syntaxHighlighter=this\n        await Promise.all([\n            ...e.querySelectorAll('script'+highlighter.selector)\n        ].map(async e=>{\n            e.innerHTML=await syntaxHighlighter[highlighter.functionName](e.innerHTML)\n            if(!e.classList.contains('bordered'))\n                replaceByDiv(e)\n        }))\n    }\n    return highlight_all\n})()\n","highlighter/newlineDeletedAnalyze.js":"(async()=>{\n    let[\n        Syntax,\n    ]=await Promise.all([\n        module.repository.Syntax,\n    ])\n    function newlineDeletedAnalyze(matchingRules,source){\n    /*\n    C++\n    N3242 2.2.2\n    .   Delete \"backslash character (\\) immediately followed by a\n        new-line character\".\n    .   Call analyze0().\n    .   Add DeletedNewline() back.\n    */\n        var\n            result=[],\n            a=source.split('\\\\\\n'),\n        source=this.analyze(matchingRules,a.join(''))\n        a=a.map(s=>s.length)\n        a.pop()\n        dfs(source,result,a)\n        return result\n    }\n    function dfs(source,result,a){\n        while(source.length){\n            if(typeof source[0]=='string'){\n                if(a.length==0){\n                    result.push(source[0])\n                    source.shift()\n                }else{\n                    if(a[0]<source[0].length){\n                        result.push(source[0].substring(0,a[0]))\n                        result.push(new Syntax(\n                            'deletedNewline',\n                            ['\\\\\\n']\n                        ))\n                        source[0]=source[0].substring(a[0])\n                        a.shift()\n                    }else{\n                        result.push(source[0])\n                        a[0]-=source[0].length\n                        source.shift()\n                    }\n                }\n                continue\n            }\n            if(typeof source[0]=='object')(()=>{\n                var list=[]\n                dfs(source[0].list,list,a)\n                result.push(new Syntax(source[0].syntaxName,list))\n                source.shift()\n            })()\n        }\n        while(a.length&&a[0]==0){\n            result.push(new Syntax('deletedNewline',['\\\\\\n']))\n            a.shift()\n        }\n    }\n    return newlineDeletedAnalyze\n})()\n","highlighter.css":"/*\n    font-weight:bold; 總是要加上 line-height:0px; 忘記原因了\n*/\n.bordered{\n    word-break:break-all;\n}\n.bordered table{\n    table-layout:fixed;\n    width:100%;\n    font-family:monospace;\n    text-align:left;\n}\n.bordered td.lineNumber::before{\n    content:attr(data-line-number);\n}\n.bordered td.lineNumber{\n    text-align:right;\n    color:gray;\n    vertical-align:top;\n    height:12pt;\n    white-space:nowrap;\n}\n.bordered td.content{\n    padding-left:16px;\n    white-space:pre-wrap;\n    word-wrap:break-word;\n}\n.highlighted_cpp{\n    tab-size:4;\n    line-height:12pt;\n}\nspan.highlighted_cpp{\n    font-family:monospace;\n}\nspan.highlighted_html{\n    font-family:monospace;\n}\nspan.highlighted_js{\n    font-family:monospace;\n}\nspan.highlighted_tex{\n    font-family:monospace;\n}\n.highlighted_cpp span.deletedNewline{\n    font-weight:normal;\n    color:black;\n}\n.highlighted_cpp span.characterLiteral{\n    color:blue;\n}\n.highlighted_cpp span.comment{\n    color:gray;\n}\n.highlighted_cpp span.rawStringLiteral{\n    color:blue;\n}\n.highlighted_cpp span.cStringLiteral{\n    color:blue;\n}\n.highlighted_cpp span.numberLiteral{\n    color:darkviolet;\n}\n.highlighted_cpp span.operator{\n    color:red;\n}\n.highlighted_cpp span.preprocessingDirective{\n    color:green;\n}\n.highlighted_cpp span.headerName{\n    color:darkred;\n}\n.highlighted_cpp span.headerNameSlash{\n    color:darkblue;\n}\n.highlighted_cpp span.definePDKeyValue{\n    color:darkred;\n}\n.highlighted_cpp span.definePDValue{\n    color:darkblue;\n}\n.highlighted_cpp span.definePDValue span.operator{\n    color:darkblue;\n}\n.highlighted_cpp span.keywords{\n    color:darkblue;\n    font-weight:bold;\n    line-height:0px;\n}\n.highlighted_cpp span.library{\n    color:deeppink;\n}\n.highlighted_cpp span.stlcontainers{\n    color:green;\n    font-weight:bold;\n    line-height:0px;\n}\n.highlighted_cpp span.constants{\n    color:darkviolet;\n    font-weight:bold;\n    line-height:0px;\n}\n.highlighted_html span.startTag{\n    color:green;\n}\n.highlighted_html span.tagname{\n    color:darkblue;\n    font-weight:bold;\n    line-height:0px;\n}\n.highlighted_html span.attribute{\n    color:deeppink;\n}\n.highlighted_html span.afterEqualInAttribute{\n    color:green;\n}\n.highlighted_html span.attributeValue{\n    color:blue;\n}\n.highlighted_html span.endTag{\n    color:green;\n}\n.highlighted_html span.comment{\n    color:gray;\n}\n.highlighted_js span.comment{\n    color:gray;\n}\n.highlighted_js span.string{\n    color:blue;\n}\n.highlighted_js span.number{\n    color:darkviolet;\n}\n.highlighted_js span.keyword{\n    color:darkblue;\n    font-weight:bold;\n    line-height:0px;\n}\n.highlighted_js span.operator{\n    color:red;\n}\n.highlighted_tex span.comment{\n    color:gray;\n}\n.highlighted_tex span.operator{\n    color:red;\n}\n.highlighted_tex span.coreCommands{\n    color:blue;\n}\n.highlighted_tex span.documentClasses{\n    color:green;\n}\n.highlighted_tex span.commonArguments{\n    color:green;\n}\n.highlighted_tex span.commonPackages{\n    color:green;\n}\n","highlighter.js":";(async()=>{\n    if(!module.repository.althea)\n        module.repository.althea=(await module.importByPath('https://cdn.rawgit.com/anliting/althea/5c49592c8779c5f5387345a3d4da25a5de55fb26/src/AltheaServer/HttpServer/files/lib/repository.js',{mode:1})).althea\n    module.repository.Syntax=module.shareImport('highlighter/Syntax.js')\n    let[\n        dom,\n        html,\n        Syntax,\n        analyze,\n        highlight_all,\n        border_all,\n        newlineDeletedAnalyze,\n    ]=await Promise.all([\n        module.repository.althea.dom,\n        module.repository.althea.html,\n        module.repository.Syntax,\n        module.shareImport('highlighter/analyze.js'),\n        module.shareImport('highlighter/highlight_all.js'),\n        module.shareImport('highlighter/border_all.js'),\n        module.shareImport('highlighter/newlineDeletedAnalyze.js'),\n    ])\n    let\n        options=window.syntaxHighlighter\n    loadCSS('highlighter.css')\n    syntaxHighlighter.modules=new Cache(evalScript)\n    syntaxHighlighter.Database=Database\n    syntaxHighlighter.analyze=analyze\n    syntaxHighlighter.newlineDeletedAnalyze=newlineDeletedAnalyze\n    syntaxHighlighter.highlight=highlight\n    syntaxHighlighter.highlight_all=highlight_all\n    syntaxHighlighter.border_all=border_all\n    async function syntaxHighlighter(){\n        await this.highlight_all()\n        await this.border_all()\n    }\n    async function evalScript(path){\n        return eval(await module.get(path))\n    }\n    async function loadCSS(path){\n        dom(document.head,\n            dom('style',{innerHTML:await module.get(path)})\n        )\n    }\n    function highlight(list){\n        return list.map(item=>{\n            if(typeof item=='string')\n                return html.encodeText(item)\n            else if(typeof item=='object')\n                return `<span class=${item.syntaxName}>${\n                    highlight(item.list)\n                }</span>`\n        }).join('')\n    }\n    function Database(name){\n        Cache.call(this,async(key)=>{\n            this.data[key]=JSON.parse(await module.get(`${name}/${key}.json`))\n        })\n        this.data={}\n    }\n    Database.prototype=Object.create(Cache.prototype)\n    function Cache(load){\n        this.load=load\n        this.status={}\n        this.onLoad={}\n    }\n    Cache.prototype.require=async function(key){\n        if(key instanceof Array)\n            return Promise.all(key.map(key=>this.require(key)))\n        if(!this.onLoad[key])\n            this.onLoad[key]=this.load(key)\n        return this.onLoad[key]\n    }\n    return syntaxHighlighter\n})()\n","html/property.js":"console.log(JSON.stringify([\n    'src','href','rel','type','class','id','name','style','target','value','method','http-equiv','content','action','onchange','onclick','enctype','checked','selected','charset','rows','cols'\n]))\n","highlighter.linked.js":"","html/property.json":"[\"src\",\"href\",\"rel\",\"type\",\"class\",\"id\",\"name\",\"style\",\"target\",\"value\",\"method\",\"http-equiv\",\"content\",\"action\",\"onchange\",\"onclick\",\"enctype\",\"checked\",\"selected\",\"charset\",\"rows\",\"cols\"]\n","html/tagname.js":"console.log(JSON.stringify([\n    'body','html','head','meta','title','link','script','div','p','option','form','br','a','table','tr','td','textarea','select','input','span','h1','h2','h3',\n]))\n","html/tagname.json":"[\"body\",\"html\",\"head\",\"meta\",\"title\",\"link\",\"script\",\"div\",\"p\",\"option\",\"form\",\"br\",\"a\",\"table\",\"tr\",\"td\",\"textarea\",\"select\",\"input\",\"span\",\"h1\",\"h2\",\"h3\"]\n","js/keyword.js":"/*\nFollowing keywords are listed on:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar\n*/\nconsole.log(JSON.stringify([\n    'break',\n    'case',\n    'class',\n    'catch',\n    'const',\n    'continue',\n    'debugger',\n    'default',\n    'delete',\n    'do',\n    'else',\n    'export',\n    'extends',\n    'finally',\n    'for',\n    'function',\n    'if',\n    'import',\n    'in',\n    'instanceof',\n    'let',\n    'new',\n    'return',\n    'super',\n    'switch',\n    'this',\n    'throw',\n    'try',\n    'typeof',\n    'var',\n    'void',\n    'while',\n    'with',\n    'yield',\n]))\n","js/keyword.json":"[\"break\",\"case\",\"class\",\"catch\",\"const\",\"continue\",\"debugger\",\"default\",\"delete\",\"do\",\"else\",\"export\",\"extends\",\"finally\",\"for\",\"function\",\"if\",\"import\",\"in\",\"instanceof\",\"let\",\"new\",\"return\",\"super\",\"switch\",\"this\",\"throw\",\"try\",\"typeof\",\"var\",\"void\",\"while\",\"with\",\"yield\"]\n","js/library.js":"console.log(JSON.stringify([\n    'alert',\n]))\n","js/library.json":"[\"alert\"]\n","link":"node $linker highlighter.js . > highlighter.linked.js\n","tex/commonArguments.js":"console.log(JSON.stringify([\n    'document',\n]))\n","tex/commonArguments.json":"[\"document\"]\n","tex/commonPackages.js":"console.log(JSON.stringify([\n    'fontspec',\n]))\n","tex/commonPackages.json":"[\"fontspec\"]\n","tex/coreCommands.js":"console.log(JSON.stringify([\n    'documentclass',\n    'usepackage',\n    'documentstyle',\n    'title',\n    'author',\n    'date',\n    'pagestyle',\n    'thispagestyle',\n    'begin',\n    'end'\n]))\n","tex/coreCommands.json":"[\"documentclass\",\"usepackage\",\"documentstyle\",\"title\",\"author\",\"date\",\"pagestyle\",\"thispagestyle\",\"begin\",\"end\"]\n","tex/documentClasses.js":"console.log(JSON.stringify([\n    'article',\n    'report',\n    'book',\n    'letter',\n    'slides'\n]))\n","tex/documentClasses.json":"[\"article\",\"report\",\"book\",\"letter\",\"slides\"]\n"}).map(([k,v])=>module.static(k,v));;(async()=>{
    if(!module.repository.althea)
        module.repository.althea=(await module.importByPath('https://cdn.rawgit.com/anliting/althea/5c49592c8779c5f5387345a3d4da25a5de55fb26/src/AltheaServer/HttpServer/files/lib/repository.js',{mode:1})).althea
    module.repository.Syntax=module.shareImport('highlighter/Syntax.js')
    let[
        dom,
        html,
        Syntax,
        analyze,
        highlight_all,
        border_all,
        newlineDeletedAnalyze,
    ]=await Promise.all([
        module.repository.althea.dom,
        module.repository.althea.html,
        module.repository.Syntax,
        module.shareImport('highlighter/analyze.js'),
        module.shareImport('highlighter/highlight_all.js'),
        module.shareImport('highlighter/border_all.js'),
        module.shareImport('highlighter/newlineDeletedAnalyze.js'),
    ])
    let
        options=window.syntaxHighlighter
    loadCSS('highlighter.css')
    syntaxHighlighter.modules=new Cache(evalScript)
    syntaxHighlighter.Database=Database
    syntaxHighlighter.analyze=analyze
    syntaxHighlighter.newlineDeletedAnalyze=newlineDeletedAnalyze
    syntaxHighlighter.highlight=highlight
    syntaxHighlighter.highlight_all=highlight_all
    syntaxHighlighter.border_all=border_all
    async function syntaxHighlighter(){
        await this.highlight_all()
        await this.border_all()
    }
    async function evalScript(path){
        return eval(await module.get(path))
    }
    async function loadCSS(path){
        dom(document.head,
            dom('style',{innerHTML:await module.get(path)})
        )
    }
    function highlight(list){
        return list.map(item=>{
            if(typeof item=='string')
                return html.encodeText(item)
            else if(typeof item=='object')
                return `<span class=${item.syntaxName}>${
                    highlight(item.list)
                }</span>`
        }).join('')
    }
    function Database(name){
        Cache.call(this,async(key)=>{
            this.data[key]=JSON.parse(await module.get(`${name}/${key}.json`))
        })
        this.data={}
    }
    Database.prototype=Object.create(Cache.prototype)
    function Cache(load){
        this.load=load
        this.status={}
        this.onLoad={}
    }
    Cache.prototype.require=async function(key){
        if(key instanceof Array)
            return Promise.all(key.map(key=>this.require(key)))
        if(!this.onLoad[key])
            this.onLoad[key]=this.load(key)
        return this.onLoad[key]
    }
    return syntaxHighlighter
})()
